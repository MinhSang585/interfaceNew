<?phpclass Account_model extends CI_Model {	protected $table_sub_accounts = 'sub_accounts';	protected $table_sub_account_logs = 'sub_account_logs';		public function verify_login()	{		$result = NULL;				$username = $this->input->post('username', TRUE);		$password = $this->input->post('password', TRUE);				$query = $this				->db				->select('sub_account_id AS user_id, nickname, username, password, user_type, active, permissions, upline, white_list_ip, user_role')				->where('username', $username)				->limit(1)				->get($this->table_sub_accounts);						if($query->num_rows() > 0) 		{			$row = $query->row_array();						$session_data['user_id'] = $row['user_id'];			$session_data['nickname'] = $row['nickname'];			$session_data['username'] = $row['username'];			$session_data['user_type'] = $row['user_type'];			$session_data['active'] = $row['active'];			$session_data['permissions'] = $row['permissions'];			$session_data['user_role'] = $row['user_role'];			$session_data['upline'] = $row['upline'];			$session_data['white_list_ip'] = $row['white_list_ip'];			$session_data['user_group'] = USER_GROUP_SUB_ACCOUNT;			$session_data['last_login_date'] = time();			$session_data['login_token'] = session_id();			$session_data['is_logged_in'] = FALSE;						if(password_verify($password, $row['password'])) 			{				$session_data['is_logged_in'] = TRUE;			}						$result = $session_data;		}		$query->free_result();				return $result;	}		public function update_last_login($data = NULL)	{		$DBdata = array(			'last_login_date' => $data['last_login_date'],			'last_login_ip' => $this->input->ip_address(),			'login_token' => $data['login_token']		);					$this->db->where('sub_account_id', $data['user_id']);		$this->db->limit(1);		$this->db->update($this->table_sub_accounts, $DBdata);	}		public function insert_log($type = NULL, $ndata = NULL, $odata = NULL)	{		$DBdata = array(			'sub_account_id' => $this->session->userdata('user_id'),			'player_id' => ((isset($ndata['player_id']))?$ndata['player_id']:''),			'log_type' => $type,			'ip_address' => $this->input->ip_address(),			'log_date' => time(),			'old_data' => (($odata) ? json_encode($odata) : ''),			'new_data' => (($ndata) ? json_encode($ndata) : '')		);				if($this->agent->is_mobile()) 		{			$DBdata['user_agent'] = $this->agent->mobile() . ' ' . $this->agent->browser() . ' ' . $this->agent->version();			$DBdata['platform'] = PLATFORM_MOBILE_WEB;		}		else 		{			$DBdata['user_agent'] = $this->agent->browser() . ' ' . $this->agent->version();			$DBdata['platform'] = PLATFORM_WEB;		}				$this->db->insert($this->table_sub_account_logs, $DBdata);	}		public function verify_session()	{		$result = FALSE;				$query = $this				->db				->select('login_token')				->where('sub_account_id', $this->session->userdata('user_id'))				->where('login_token', $this->session->userdata('login_token'))				->limit(1)				->get($this->table_sub_accounts);						if($query->num_rows() > 0) 		{			$result = TRUE;		}		$query->free_result();				return $result;	}		public function clear_login_token()	{		$this->db->set('login_token', '');		$this->db->where('sub_account_id', $this->session->userdata('user_id'));		$this->db->limit(1);		$this->db->update($this->table_sub_accounts);	}		public function verify_current_password()	{			$result = FALSE;				$oldpass = $this->input->post('oldpass', TRUE);				$query = $this				->db				->select('password')				->where('sub_account_id', $this->session->userdata('user_id'))				->limit(1)				->get($this->table_sub_accounts);						if($query->num_rows() > 0) 		{			$row = $query->row_array();						if(password_verify($oldpass, $row['password'])) 			{				$result = TRUE;			}		}		$query->free_result();				return $result;	}		public function update_password()	{			$new_password = $this->input->post('password', TRUE);		$new_password = password_hash($new_password, PASSWORD_DEFAULT);				$this->db->set('password', $new_password);		$this->db->where('sub_account_id', $this->session->userdata('user_id'));		$this->db->limit(1);		$this->db->update($this->table_sub_accounts);	}		public function get_sub_account_data($id = NULL)	{			$result = FALSE;			$query = $this				->db				->where('sub_account_id', $id)				->limit(1)				->get($this->table_sub_accounts);						if($query->num_rows() > 0)		{			$result = $query->row_array();  		}				$query->free_result();				return $result;	}		public function add_sub_account($user = NULL)	{		$new_password = $this->input->post('password', TRUE);		$new_password = password_hash($new_password, PASSWORD_DEFAULT);				$DBdata = array(			'nickname' => $this->input->post('nickname', TRUE),			'username' => $this->input->post('username', TRUE),			'password' => $new_password,			'user_type' => $user['user_type'],			'user_role' => $this->input->post('user_role', TRUE),			'active' => STATUS_ACTIVE,			'permissions' => get_upline_permission(USER_GROUP_SUB_ACCOUNT, $user['user_type'], $user['permissions']),			'upline' => $user['username'],			'white_list_ip' => (($this->input->post('white_list_ip[]', TRUE)) ? implode(',', $this->input->post('white_list_ip[]', TRUE)) : ''),			'created_by' => $this->session->userdata('username'),			'created_date' => time()		);				$this->db->insert($this->table_sub_accounts, $DBdata);				$DBdata['sub_account_id'] = $this->db->insert_id();				return $DBdata;	}		public function update_sub_account($acc = NULL)	{			$DBdata = array(			'user_role' => $this->input->post('user_role', TRUE),			'nickname' => $this->input->post('nickname', TRUE),			'active' => (($this->input->post('active', TRUE) == STATUS_ACTIVE) ? STATUS_ACTIVE : STATUS_SUSPEND),			'white_list_ip' => (($this->input->post('white_list_ip[]', TRUE)) ? implode(',', $this->input->post('white_list_ip[]', TRUE)) : ''),			'updated_by' => $this->session->userdata('username'),			'updated_date' => time()		);				$this->db->where('sub_account_id', $acc['sub_account_id']);		$this->db->limit(1);		$this->db->update($this->table_sub_accounts, $DBdata);				$DBdata['sub_account_id'] = $acc['sub_account_id'];		$DBdata['username'] = $acc['username'];				return $DBdata;	}		public function update_sub_account_permission($acc = NULL, $permissions = NULL)	{			$DBdata = array(			'permissions' => $permissions,			'updated_by' => $this->session->userdata('username'),			'updated_date' => time()		);				$this->db->where('sub_account_id', $acc['sub_account_id']);		$this->db->limit(1);		$this->db->update($this->table_sub_accounts, $DBdata);				$DBdata['sub_account_id'] = $acc['sub_account_id'];		$DBdata['username'] = $acc['username'];				return $DBdata;	}		public function update_sub_account_password($acc = NULL)	{			$new_password = $this->input->post('password', TRUE);		$new_password = password_hash($new_password, PASSWORD_DEFAULT);				$DBdata = array(			'password' => $new_password,			'updated_by' => $this->session->userdata('username'),			'updated_date' => time()		);				$this->db->where('sub_account_id', $acc['sub_account_id']);		$this->db->limit(1);		$this->db->update($this->table_sub_accounts, $DBdata);				$DBdata['sub_account_id'] = $acc['sub_account_id'];		$DBdata['username'] = $acc['username'];				return $DBdata;	}	public function get_sub_account_data_by_username($username = NULL)	{			$result = NULL;				$query = $this				->db				->where('username', $username)				->limit(1)				->get($this->table_sub_accounts);				if($query->num_rows() > 0)		{			$result = $query->row_array();  		}				$query->free_result();				return $result;	}	public function get_sub_account_data_by_user_role_id($user_role_id = NULL)	{			$result = NULL;				$query = $this				->db				->where('user_role_id', $user_role_id)				->limit(1)				->get($this->table_sub_accounts);				if($query->num_rows() > 0)		{			$result = $query->row_array();  		}				$query->free_result();				return $result;	}}